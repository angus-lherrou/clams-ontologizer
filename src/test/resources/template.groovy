/*
 * This template expects three parameters to be passed to it:
 *
 * 1. element : the ElementDelegate for the page being generated.
 * 2. elements: a HashMap used to map element names to their ElementDelegate object.
 * 3. parents: the names all parents of this element.
 */
html {
    head {
        title element.name
        link rel:'stylesheet', type:'text/css', href:'lappsstyle.css'
    }
    body {
        div(id:'container') {
            div(id:'mainContent') {
                p(class:'head') {
                    parents.each { parent ->
                        a(href:"${parent.name}.html", parent.name)
                        span ' > '
                    }
                    span element.name
                }
                p element.definition
                table(class:'definition-table') {
                    if (element.sameAs.size() > 0) {
                        tr {
                            td { b "Same as" }
                            td {
                                element.sameAs.collect { a(href:it, it) }.join(" ")
                            }
                        }
                    }
                    if (element.similarTo.size() > 0) {
                        tr {
                            td { b "Similar to" }
                            td {
                                element.similarTo.collect { a(href:it, it) }.join(" ")
                            }
                        }
                    }
                    tr {
                        td { b "URI" }
                        td element.uri
                    }
                }
                //def parent = element.parent
                while (element) {
                    if (element.properties.size() > 0) {
//                        String link = "<a href='${element.name}'>${element.name}</a>"
                        h2 {
                        	span "Properties from "
                        	a(href:"${element.name}.html", element.name)
                        }
                        table(class: 'definition-table') {
                            tr {
                                //td { b "Properties" }
                                //td { b "Type" }
                                //td { b "Description" }
                                th "Properties"
                                th "Type"
                                th "Description"
                            }
                            List names = element.properties.keySet().asList().sort()
                            names.each { name ->
                                tr {
                                    def property = element.properties[name]
                                    td name
                                    td property.type
                                    td property.description
                                }
                            }
                        }
                    }
                    element = elements[element.parent]
                }
                br()
                div(class:'index') {
                    span "Back to the "
                    a(href:'index.html', 'index')
                }
            }
        }
        div(id:'footer', 'Page generated by the MarkupBuilderTemplateEngine.')
    }
}
/**
 * Created by Nathan on 8/1/2014.
 */
